// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: user.sql

package db

import (
	"context"
)

const createUser = `-- name: CreateUser :one
INSERT INTO "user" (
    username, hashed_password, name
) VALUES (
    $1, $2, $3 
) RETURNING id, username, name, hashed_password, password_changed_at, deleted_at, created_at
`

type CreateUserParams struct {
	Username       string `json:"username"`
	HashedPassword string `json:"hashed_password"`
	Name           string `json:"name"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser, arg.Username, arg.HashedPassword, arg.Name)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Name,
		&i.HashedPassword,
		&i.PasswordChangedAt,
		&i.DeletedAt,
		&i.CreatedAt,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM "user"
WHERE id $1
`

func (q *Queries) DeleteUser(ctx context.Context, dollar_1 interface{}) error {
	_, err := q.db.ExecContext(ctx, deleteUser, dollar_1)
	return err
}

const getUserAuth = `-- name: GetUserAuth :one
SELECT id, username, name, hashed_password, password_changed_at, deleted_at, created_at FROM "user"
WHERE username = $1
LIMIT 1
`

func (q *Queries) GetUserAuth(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserAuth, username)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Name,
		&i.HashedPassword,
		&i.PasswordChangedAt,
		&i.DeletedAt,
		&i.CreatedAt,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, username, name FROM "user"
WHERE id = $1
LIMIT 1
`

type GetUserByIDRow struct {
	ID       int64  `json:"id"`
	Username string `json:"username"`
	Name     string `json:"name"`
}

func (q *Queries) GetUserByID(ctx context.Context, id int64) (GetUserByIDRow, error) {
	row := q.db.QueryRowContext(ctx, getUserByID, id)
	var i GetUserByIDRow
	err := row.Scan(&i.ID, &i.Username, &i.Name)
	return i, err
}

const getUserID = `-- name: GetUserID :one
SELECT id FROM "user"
WHERE username = $1
LIMIT 1
`

func (q *Queries) GetUserID(ctx context.Context, username string) (int64, error) {
	row := q.db.QueryRowContext(ctx, getUserID, username)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const listUser = `-- name: ListUser :many
SELECT id, username
FROM "user"
LIMIT $1
OFFSET $2
`

type ListUserParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

type ListUserRow struct {
	ID       int64  `json:"id"`
	Username string `json:"username"`
}

func (q *Queries) ListUser(ctx context.Context, arg ListUserParams) ([]ListUserRow, error) {
	rows, err := q.db.QueryContext(ctx, listUser, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListUserRow{}
	for rows.Next() {
		var i ListUserRow
		if err := rows.Scan(&i.ID, &i.Username); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUserFilter = `-- name: ListUserFilter :many
SELECT id, username
FROM "user"
WHERE username LIKE CONCAT($3::text, '%')
OR name LIKE CONCAT($3::text, '%')
LIMIT $1
OFFSET $2
`

type ListUserFilterParams struct {
	Limit  int32  `json:"limit"`
	Offset int32  `json:"offset"`
	Filter string `json:"filter"`
}

type ListUserFilterRow struct {
	ID       int64  `json:"id"`
	Username string `json:"username"`
}

func (q *Queries) ListUserFilter(ctx context.Context, arg ListUserFilterParams) ([]ListUserFilterRow, error) {
	rows, err := q.db.QueryContext(ctx, listUserFilter, arg.Limit, arg.Offset, arg.Filter)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListUserFilterRow{}
	for rows.Next() {
		var i ListUserFilterRow
		if err := rows.Scan(&i.ID, &i.Username); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePassword = `-- name: UpdatePassword :exec
UPDATE "user"
SET hashed_password = $1
WHERE id = $2
`

type UpdatePasswordParams struct {
	HashedPassword string `json:"hashed_password"`
	ID             int64  `json:"id"`
}

func (q *Queries) UpdatePassword(ctx context.Context, arg UpdatePasswordParams) error {
	_, err := q.db.ExecContext(ctx, updatePassword, arg.HashedPassword, arg.ID)
	return err
}
