// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: card.sql

package db

import (
	"context"
	"database/sql"
)

const createCard = `-- name: CreateCard :one
INSERT INTO "card" (
    author, accused, color, event
) VALUES (
    $1, $2, $3, $4
) RETURNING id, author, accused, color, event, created_at
`

type CreateCardParams struct {
	Author  int64         `json:"author"`
	Accused int64         `json:"accused"`
	Color   Color         `json:"color"`
	Event   sql.NullInt64 `json:"event"`
}

func (q *Queries) CreateCard(ctx context.Context, arg CreateCardParams) (Card, error) {
	row := q.db.QueryRowContext(ctx, createCard,
		arg.Author,
		arg.Accused,
		arg.Color,
		arg.Event,
	)
	var i Card
	err := row.Scan(
		&i.ID,
		&i.Author,
		&i.Accused,
		&i.Color,
		&i.Event,
		&i.CreatedAt,
	)
	return i, err
}

const getCard = `-- name: GetCard :one
SELECT id, author, accused, color, event, created_at FROM "card"
WHERE id = $1
`

func (q *Queries) GetCard(ctx context.Context, id int64) (Card, error) {
	row := q.db.QueryRowContext(ctx, getCard, id)
	var i Card
	err := row.Scan(
		&i.ID,
		&i.Author,
		&i.Accused,
		&i.Color,
		&i.Event,
		&i.CreatedAt,
	)
	return i, err
}

const listCardsFromUserByUsername = `-- name: ListCardsFromUserByUsername :many
SELECT c.id, c.author, c.accused, c.color, c.event , u.username 
FROM "card" as c
JOIN "user" as u 
on u.id=c.author
WHERE username=$1
`

type ListCardsFromUserByUsernameRow struct {
	ID       int64         `json:"id"`
	Author   int64         `json:"author"`
	Accused  int64         `json:"accused"`
	Color    Color         `json:"color"`
	Event    sql.NullInt64 `json:"event"`
	Username string        `json:"username"`
}

func (q *Queries) ListCardsFromUserByUsername(ctx context.Context, username string) ([]ListCardsFromUserByUsernameRow, error) {
	rows, err := q.db.QueryContext(ctx, listCardsFromUserByUsername, username)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListCardsFromUserByUsernameRow{}
	for rows.Next() {
		var i ListCardsFromUserByUsernameRow
		if err := rows.Scan(
			&i.ID,
			&i.Author,
			&i.Accused,
			&i.Color,
			&i.Event,
			&i.Username,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listMostRecentCard = `-- name: ListMostRecentCard :many
SELECT id, author, accused, color, event, created_at FROM "card"
ORDER BY created_at DESC
LIMIT $1
OFFSET $2
`

type ListMostRecentCardParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListMostRecentCard(ctx context.Context, arg ListMostRecentCardParams) ([]Card, error) {
	rows, err := q.db.QueryContext(ctx, listMostRecentCard, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Card{}
	for rows.Next() {
		var i Card
		if err := rows.Scan(
			&i.ID,
			&i.Author,
			&i.Accused,
			&i.Color,
			&i.Event,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
