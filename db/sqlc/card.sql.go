// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: card.sql

package db

import (
	"context"
	"database/sql"
)

const createCard = `-- name: CreateCard :one
INSERT INTO "card" (
    author, accused, color, event
) VALUES (
    $1, $2, $3, $4
) RETURNING id, author, accused, color, event, created_at
`

type CreateCardParams struct {
	Author  int64         `json:"author"`
	Accused int64         `json:"accused"`
	Color   Color         `json:"color"`
	Event   sql.NullInt64 `json:"event"`
}

func (q *Queries) CreateCard(ctx context.Context, arg CreateCardParams) (Card, error) {
	row := q.db.QueryRowContext(ctx, createCard,
		arg.Author,
		arg.Accused,
		arg.Color,
		arg.Event,
	)
	var i Card
	err := row.Scan(
		&i.ID,
		&i.Author,
		&i.Accused,
		&i.Color,
		&i.Event,
		&i.CreatedAt,
	)
	return i, err
}

const getCard = `-- name: GetCard :one
SELECT c.id, acc.username as accused_username, acc.first_name as accused_first_name, acc.last_name as accused_last_name,
aut.username as author_username, aut.first_name as author_first_name, aut.last_name as author_last_name,
color, event, c.created_at 
FROM "card" as c
JOIN "user" as acc on acc.id=c.accused
JOIN "user" as aut on aut.id=c.author
WHERE c.id = $1
`

type GetCardRow struct {
	ID               int64          `json:"id"`
	AccusedUsername  string         `json:"accused_username"`
	AccusedFirstName sql.NullString `json:"accused_first_name"`
	AccusedLastName  sql.NullString `json:"accused_last_name"`
	AuthorUsername   string         `json:"author_username"`
	AuthorFirstName  sql.NullString `json:"author_first_name"`
	AuthorLastName   sql.NullString `json:"author_last_name"`
	Color            Color          `json:"color"`
	Event            sql.NullInt64  `json:"event"`
	CreatedAt        sql.NullTime   `json:"created_at"`
}

func (q *Queries) GetCard(ctx context.Context, id int64) (GetCardRow, error) {
	row := q.db.QueryRowContext(ctx, getCard, id)
	var i GetCardRow
	err := row.Scan(
		&i.ID,
		&i.AccusedUsername,
		&i.AccusedFirstName,
		&i.AccusedLastName,
		&i.AuthorUsername,
		&i.AuthorFirstName,
		&i.AuthorLastName,
		&i.Color,
		&i.Event,
		&i.CreatedAt,
	)
	return i, err
}

const listCardsByUserID = `-- name: ListCardsByUserID :many
SELECT c.id, c.author, c.accused, c.color, c.event, c.created_at , u.username as author_username
FROM "card" as c
JOIN "user" as u 
on u.id=c.author
WHERE c.accused=$1
`

type ListCardsByUserIDRow struct {
	ID             int64         `json:"id"`
	Author         int64         `json:"author"`
	Accused        int64         `json:"accused"`
	Color          Color         `json:"color"`
	Event          sql.NullInt64 `json:"event"`
	CreatedAt      sql.NullTime  `json:"created_at"`
	AuthorUsername string        `json:"author_username"`
}

func (q *Queries) ListCardsByUserID(ctx context.Context, accused int64) ([]ListCardsByUserIDRow, error) {
	rows, err := q.db.QueryContext(ctx, listCardsByUserID, accused)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListCardsByUserIDRow{}
	for rows.Next() {
		var i ListCardsByUserIDRow
		if err := rows.Scan(
			&i.ID,
			&i.Author,
			&i.Accused,
			&i.Color,
			&i.Event,
			&i.CreatedAt,
			&i.AuthorUsername,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listMostRecentCard = `-- name: ListMostRecentCard :many
SELECT c.id, acc.username as accused_username, acc.first_name as accused_first_name, acc.last_name as accused_last_name,
aut.username as author_username, aut.first_name as author_first_name, aut.last_name as author_last_name,
color, event, c.created_at 
FROM "card" as c
JOIN "user" as acc on acc.id=c.accused
JOIN "user" as aut on aut.id=c.author
ORDER BY c.created_at DESC
LIMIT $1
OFFSET $2
`

type ListMostRecentCardParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

type ListMostRecentCardRow struct {
	ID               int64          `json:"id"`
	AccusedUsername  string         `json:"accused_username"`
	AccusedFirstName sql.NullString `json:"accused_first_name"`
	AccusedLastName  sql.NullString `json:"accused_last_name"`
	AuthorUsername   string         `json:"author_username"`
	AuthorFirstName  sql.NullString `json:"author_first_name"`
	AuthorLastName   sql.NullString `json:"author_last_name"`
	Color            Color          `json:"color"`
	Event            sql.NullInt64  `json:"event"`
	CreatedAt        sql.NullTime   `json:"created_at"`
}

func (q *Queries) ListMostRecentCard(ctx context.Context, arg ListMostRecentCardParams) ([]ListMostRecentCardRow, error) {
	rows, err := q.db.QueryContext(ctx, listMostRecentCard, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListMostRecentCardRow{}
	for rows.Next() {
		var i ListMostRecentCardRow
		if err := rows.Scan(
			&i.ID,
			&i.AccusedUsername,
			&i.AccusedFirstName,
			&i.AccusedLastName,
			&i.AuthorUsername,
			&i.AuthorFirstName,
			&i.AuthorLastName,
			&i.Color,
			&i.Event,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
