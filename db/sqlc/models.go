// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0

package db

import (
	"database/sql"
	"database/sql/driver"
	"fmt"
	"time"
)

type Color string

const (
	ColorRed    Color = "red"
	ColorYellow Color = "yellow"
	ColorBlue   Color = "blue"
)

func (e *Color) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = Color(s)
	case string:
		*e = Color(s)
	default:
		return fmt.Errorf("unsupported scan type for Color: %T", src)
	}
	return nil
}

type NullColor struct {
	Color Color `json:"color"`
	Valid bool  `json:"valid"` // Valid is true if Color is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullColor) Scan(value interface{}) error {
	if value == nil {
		ns.Color, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.Color.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullColor) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.Color), nil
}

type Card struct {
	ID        int64         `json:"id"`
	Author    int64         `json:"author"`
	Accused   int64         `json:"accused"`
	Color     Color         `json:"color"`
	Event     sql.NullInt64 `json:"event"`
	CreatedAt sql.NullTime  `json:"created_at"`
}

type Comment struct {
	ID        int64        `json:"id"`
	Message   string       `json:"message"`
	Author    int64        `json:"author"`
	Card      int64        `json:"card"`
	DeletedAt sql.NullTime `json:"deleted_at"`
	CreatedAt sql.NullTime `json:"created_at"`
}

type Event struct {
	ID        int64        `json:"id"`
	Name      string       `json:"name"`
	Date      time.Time    `json:"date"`
	DeletedAt sql.NullTime `json:"deleted_at"`
	CreatedAt sql.NullTime `json:"created_at"`
}

type EventUser struct {
	EventID int64 `json:"event_id"`
	UserID  int64 `json:"user_id"`
}

type User struct {
	ID                int64          `json:"id"`
	Username          string         `json:"username"`
	FirstName         sql.NullString `json:"first_name"`
	LastName          sql.NullString `json:"last_name"`
	HashedPassword    string         `json:"hashed_password"`
	PasswordChangedAt sql.NullTime   `json:"password_changed_at"`
	DeletedAt         sql.NullTime   `json:"deleted_at"`
	CreatedAt         sql.NullTime   `json:"created_at"`
}
