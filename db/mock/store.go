// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/broemp/red_card/db/sqlc (interfaces: Store)
//
// Generated by this command:
//
//	mockgen -destination db/mock/store.go -package mockdb github.com/broemp/red_card/db/sqlc Store
//

// Package mockdb is a generated GoMock package.
package mockdb

import (
	context "context"
	reflect "reflect"

	db "github.com/broemp/red_card/db/sqlc"
	gomock "go.uber.org/mock/gomock"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// CreateCard mocks base method.
func (m *MockStore) CreateCard(arg0 context.Context, arg1 db.CreateCardParams) (db.Card, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCard", arg0, arg1)
	ret0, _ := ret[0].(db.Card)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCard indicates an expected call of CreateCard.
func (mr *MockStoreMockRecorder) CreateCard(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCard", reflect.TypeOf((*MockStore)(nil).CreateCard), arg0, arg1)
}

// CreateComment mocks base method.
func (m *MockStore) CreateComment(arg0 context.Context, arg1 db.CreateCommentParams) (db.Comment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateComment", arg0, arg1)
	ret0, _ := ret[0].(db.Comment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateComment indicates an expected call of CreateComment.
func (mr *MockStoreMockRecorder) CreateComment(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateComment", reflect.TypeOf((*MockStore)(nil).CreateComment), arg0, arg1)
}

// CreateEvent mocks base method.
func (m *MockStore) CreateEvent(arg0 context.Context, arg1 db.CreateEventParams) (db.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEvent", arg0, arg1)
	ret0, _ := ret[0].(db.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateEvent indicates an expected call of CreateEvent.
func (mr *MockStoreMockRecorder) CreateEvent(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEvent", reflect.TypeOf((*MockStore)(nil).CreateEvent), arg0, arg1)
}

// CreateUser mocks base method.
func (m *MockStore) CreateUser(arg0 context.Context, arg1 db.CreateUserParams) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockStoreMockRecorder) CreateUser(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockStore)(nil).CreateUser), arg0, arg1)
}

// DeleteUser mocks base method.
func (m *MockStore) DeleteUser(arg0 context.Context, arg1 any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockStoreMockRecorder) DeleteUser(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockStore)(nil).DeleteUser), arg0, arg1)
}

// GetCard mocks base method.
func (m *MockStore) GetCard(arg0 context.Context, arg1 int64) (db.GetCardRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCard", arg0, arg1)
	ret0, _ := ret[0].(db.GetCardRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCard indicates an expected call of GetCard.
func (mr *MockStoreMockRecorder) GetCard(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCard", reflect.TypeOf((*MockStore)(nil).GetCard), arg0, arg1)
}

// GetCardColorCountByUserID mocks base method.
func (m *MockStore) GetCardColorCountByUserID(arg0 context.Context, arg1 int64) ([]db.GetCardColorCountByUserIDRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCardColorCountByUserID", arg0, arg1)
	ret0, _ := ret[0].([]db.GetCardColorCountByUserIDRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCardColorCountByUserID indicates an expected call of GetCardColorCountByUserID.
func (mr *MockStoreMockRecorder) GetCardColorCountByUserID(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCardColorCountByUserID", reflect.TypeOf((*MockStore)(nil).GetCardColorCountByUserID), arg0, arg1)
}

// GetUserAuth mocks base method.
func (m *MockStore) GetUserAuth(arg0 context.Context, arg1 string) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserAuth", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserAuth indicates an expected call of GetUserAuth.
func (mr *MockStoreMockRecorder) GetUserAuth(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserAuth", reflect.TypeOf((*MockStore)(nil).GetUserAuth), arg0, arg1)
}

// GetUserByID mocks base method.
func (m *MockStore) GetUserByID(arg0 context.Context, arg1 int64) (db.GetUserByIDRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByID", arg0, arg1)
	ret0, _ := ret[0].(db.GetUserByIDRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByID indicates an expected call of GetUserByID.
func (mr *MockStoreMockRecorder) GetUserByID(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByID", reflect.TypeOf((*MockStore)(nil).GetUserByID), arg0, arg1)
}

// GetUserID mocks base method.
func (m *MockStore) GetUserID(arg0 context.Context, arg1 string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserID", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserID indicates an expected call of GetUserID.
func (mr *MockStoreMockRecorder) GetUserID(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserID", reflect.TypeOf((*MockStore)(nil).GetUserID), arg0, arg1)
}

// ListCardsByUserID mocks base method.
func (m *MockStore) ListCardsByUserID(arg0 context.Context, arg1 int64) ([]db.ListCardsByUserIDRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCardsByUserID", arg0, arg1)
	ret0, _ := ret[0].([]db.ListCardsByUserIDRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCardsByUserID indicates an expected call of ListCardsByUserID.
func (mr *MockStoreMockRecorder) ListCardsByUserID(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCardsByUserID", reflect.TypeOf((*MockStore)(nil).ListCardsByUserID), arg0, arg1)
}

// ListMostRecentCard mocks base method.
func (m *MockStore) ListMostRecentCard(arg0 context.Context, arg1 db.ListMostRecentCardParams) ([]db.ListMostRecentCardRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListMostRecentCard", arg0, arg1)
	ret0, _ := ret[0].([]db.ListMostRecentCardRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMostRecentCard indicates an expected call of ListMostRecentCard.
func (mr *MockStoreMockRecorder) ListMostRecentCard(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMostRecentCard", reflect.TypeOf((*MockStore)(nil).ListMostRecentCard), arg0, arg1)
}

// ListUser mocks base method.
func (m *MockStore) ListUser(arg0 context.Context, arg1 db.ListUserParams) ([]db.ListUserRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUser", arg0, arg1)
	ret0, _ := ret[0].([]db.ListUserRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUser indicates an expected call of ListUser.
func (mr *MockStoreMockRecorder) ListUser(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUser", reflect.TypeOf((*MockStore)(nil).ListUser), arg0, arg1)
}

// ListUserFilter mocks base method.
func (m *MockStore) ListUserFilter(arg0 context.Context, arg1 db.ListUserFilterParams) ([]db.ListUserFilterRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUserFilter", arg0, arg1)
	ret0, _ := ret[0].([]db.ListUserFilterRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUserFilter indicates an expected call of ListUserFilter.
func (mr *MockStoreMockRecorder) ListUserFilter(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUserFilter", reflect.TypeOf((*MockStore)(nil).ListUserFilter), arg0, arg1)
}

// UpdatePassword mocks base method.
func (m *MockStore) UpdatePassword(arg0 context.Context, arg1 db.UpdatePasswordParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePassword", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePassword indicates an expected call of UpdatePassword.
func (mr *MockStoreMockRecorder) UpdatePassword(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePassword", reflect.TypeOf((*MockStore)(nil).UpdatePassword), arg0, arg1)
}
